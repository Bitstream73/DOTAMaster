Public Class Meepo_Clone
  Implements iPetUnit



  Private mParent As HeroInstance
  Private mGame As dGame

  Private mId As dvID

  Private mMyModinfo As modInfo

  Private mMyMods As New List(Of Modifier)
  Private mMyStats As New List(Of Stat)


  Public Sub New(parent As HeroInstance, game As dGame)
    mParent = parent
    mGame = game
    Me.mId = New dvID(Guid.NewGuid, "Meepo_Clone/New", eEntity.untMeepo_Clone)


  End Sub




  Private Function GetBoots(items As Item_List) As Item_Info
    For i = 0 To items.Count - 1

      'returned in order of preference
      Select Case items.Item(i).ItemName
        Case eItemname.itmBOOTS_OF_TRAVEL
          Return items.GetItemByName(eItemname.itmBOOTS_OF_TRAVEL)

          'case Guardian Greaves
        Case eItemname.itmPOWER_TREADS
          Return items.GetItemByName(eItemname.itmPOWER_TREADS)

        Case eItemname.itmARCANE_BOOTS
          Return items.GetItemByName(eItemname.itmARCANE_BOOTS)

        Case eItemname.itmPHASE_BOOTS
          Return items.GetByName(eItemname.itmPHASE_BOOTS)

        Case eItemname.itmTRANQUIL_BOOTS
          Return items.GetItemByName(eItemname.itmTRANQUIL_BOOTS)

        Case eItemname.itmBOOTS_OF_SPEED
          Return items.GetItemByName(eItemname.itmBOOTS_OF_SPEED)




      End Select
    Next

    Return Nothing
  End Function
  Public Function GetEnemyTarget() As iDisplayUnit Implements iDisplayUnit.GetEnemyTarget
    Return mParent.GetEnemyTarget
  End Function

  Public Function GetFriendlyTarget() As iDisplayUnit Implements iDisplayUnit.GetFriendlyTarget
    Return mParent.GetFriendlyTarget
  End Function

  Public Function GetLevelForTime(thetime As ddFrame) As Integer Implements iDisplayUnit.GetLevelForTime
    Return mParent.GetLevelForTime(thetime)
  End Function

  Public Function GetTargetFriendBias() As Boolean Implements iDisplayUnit.GetTargetFriendBias
    Return mParent.GetTargetFriendBias
  End Function

  Public Property ImageUrl As Uri Implements iDisplayUnit.ImageUrl
    Get
      Return mParent.ImageUrl
    End Get
    Set(value As Uri)

    End Set
  End Property
  Public Property MyColor As Color Implements iDisplayUnit.MyColor
    Get
      Return mParent.MyColor
    End Get
    Set(value As Color)

    End Set
  End Property
  Public Property PetsOwned As List(Of PetStack) Implements iPetUnit.PetsOwned
    Get
      Return New List(Of PetStack)
    End Get
    Set(value As List(Of PetStack))

    End Set
  End Property
  Public Sub SetTargets(theenemytarget As iDisplayUnit, _
                        thefriendlytarget As iDisplayUnit, _
                        isfriendbias As Boolean) Implements iDisplayUnit.SetTargets
    'do nothing. they are to be set in parent
  End Sub

  Public Property Team As dTeam Implements iDisplayUnit.Team
    Get
      Return mParent.Team
    End Get
    Set(value As dTeam)

    End Set
  End Property
  Public Property WebPageUrl As Uri Implements iDisplayUnit.WebPageUrl
    Get
      Return mParent.WebPageUrl
    End Get
    Set(value As Uri)

    End Set
  End Property
  Public Sub calcmods() Implements iGameEntity.calcmods
    Dim MyHerosMods = mGame.dbModifiers.GetModsByParent(Me.mParent)

    Dim meepoclonesboots = GetBoots(mParent.ItemInventory.GetItemBuildAndAutoGeneratedItems)


    For i As Integer = 0 To MyHerosMods.Count - 1
      Dim currentmod = MyHerosMods.Item(i)
      Dim modsourcesentityname = currentmod.ModGenerator.EntityName

      'remove items that do not affect meepoclones

      'thundergod's wrath
      If modsourcesentityname = eEntity.abThundergods_Wrath Then
        MyHerosMods.Remove(currentmod)
      End If



      If currentmod.ModGenerator.MyType = eSourceType.Item_Info Then
        ' and remove active item ability mods
        If currentmod.TheModInfo.mCategory = eModifierCategory.Active Then
          MyHerosMods.Remove(currentmod)
        End If
        'attribute bonuses from passive item mods unless we have agh's
        If currentmod.TheModInfo.mCategory = eModifierCategory.Passive Then
          If Not mParent.HasAghs Then
            MyHerosMods.Remove(currentmod)
          End If
        End If




        'keep mods from best set of boots and discard any other boots
        If meepoclonesboots IsNot Nothing Then
          If modsourcesentityname = eEntity.itmARCANE_BOOTS Or _
            modsourcesentityname = eEntity.itmBOOTS_OF_SPEED Or _
            modsourcesentityname = eEntity.itmBOOTS_OF_TRAVEL Or _
            modsourcesentityname = eEntity.itmPHASE_BOOTS Or _
            modsourcesentityname = eEntity.itmTRANQUIL_BOOTS Then
            ' Or modsourcesentityname = Guardian Greaves  Then
            If Not currentmod.ModGenerator.EntityName = meepoclonesboots.EntityName Then
              MyHerosMods.Remove(currentmod)
            End If

          End If




        End If

      End If
    Next


    'make mods for this meepo clone out of the surviving HeroMods
    mMyMods.Clear()
    For i = 0 To MyHerosMods.Count - 1
      Dim herosmod As Modifier = MyHerosMods.Item(i)
      mMyMods.Add(New Modifier(herosmod.TheModValue, mMyModinfo))
    Next


    mGame.dbModifiers.RemoveAllHeroModsAndStatsByHero(Me)
    '  mGame.dbModifiers.ReplaceStats(mystats, Nothing)
    mGame.dbModifiers.ReplaceModifiers(mMyMods, Nothing)

    'Now that we have all the mods we can add our stats
    'str
    Dim str As New Stat(eStattype.Strength, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Strength))
    mMyStats.Add(str)
    'Agi
    Dim agi As New Stat(eStattype.Agility, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Agility))
    mMyStats.Add(agi)
    'Int
    Dim int As New Stat(eStattype.Intelligence, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Intelligence))
    mMyStats.Add(int)

    'Attspeeed
    Dim attspd As New Stat(eStattype.AttackSpeed, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AttackSpeed))
    mMyStats.Add(attspd)

    'net attdamage
    Dim netattlow As New Stat(eStattype.AttackDamageLow, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AttackDamageLow))
    mMyStats.Add(netattlow)

    Dim netatthigh As New Stat(eStattype.AttackDamageHigh, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AttackDamageHigh))
    mMyStats.Add(netatthigh)

    Dim netattavg As New Stat(eStattype.AttackDamageAverage, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AttackDamageAverage))
    mMyStats.Add(netattavg)

    Dim movesp As New Stat(eStattype.MovementSpeed, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.MovementSpeed))
    mMyStats.Add(movesp)

    'physical armor
    Dim pharm As New Stat(eStattype.PhysicalArmor, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.PhysicalArmor))
    mMyStats.Add(pharm)

    'magic resistanec
    Dim magresist As New Stat(eStattype.MagicalDamageResistance, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.MagicalDamageResistance))
    mMyStats.Add(magresist)

    'magic immunity
    Dim magimm As New Stat(eStattype.MagicImmunity, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.MagicImmunity))
    mMyStats.Add(magimm)

    'HP
    Dim hitp As New Stat(eStattype.HitPoints, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.HitPoints))
    mMyStats.Add(hitp)

    'HP regen
    Dim hpreg As New Stat(eStattype.HitPointRegen, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.HitPointRegen))
    mMyStats.Add(hpreg)


    'Mana
    Dim mana As New Stat(eStattype.Mana, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Mana))
    mMyStats.Add(mana)

    'Mana regen
    Dim manar As New Stat(eStattype.ManaRegen, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.ManaRegen))
    mMyStats.Add(manar)

    'vision
    Dim vis As New Stat(eStattype.VisionDay, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.VisionDay))
    mMyStats.Add(vis)

    'vision night
    Dim nvis As New Stat(eStattype.VisionNight, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.VisionNight))
    mMyStats.Add(nvis)

    'TrueSight
    Dim Tru As New Stat(eStattype.TrueSight, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.TrueSight))
    mMyStats.Add(Tru)

    'stealth
    Dim ste As New Stat(eStattype.Stealth, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Stealth))
    mMyStats.Add(ste)

    'Attack range
    Dim attr As New Stat(eStattype.AttackRange, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AttackRange))
    mMyStats.Add(attr)

    'stealth
    Dim stlth As New Stat(eStattype.Stealth, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Stealth))
    mMyStats.Add(stlth)

    'missilespeed
    Dim missl As New Stat(eStattype.MissileSpeed, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.MissileSpeed))
    mMyStats.Add(missl)

    'base attack time
    Dim baseatt As New Stat(eStattype.BaseAttackTime, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.BaseAttackTime))
    mMyStats.Add(baseatt)

    'critchance
    Dim critch As New Stat(eStattype.CritChance, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.CritChance))
    mMyStats.Add(critch)


    'critdamage
    Dim critd As New Stat(eStattype.CritDamage, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.CritDamage))
    mMyStats.Add(critd)

    'critmulti
    Dim critm As New Stat(eStattype.CritMultiplier, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.CritMultiplier))
    mMyStats.Add(critm)

    'physical damage
    Dim physdam As New Stat(eStattype.PhysicalDamage, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.PhysicalDamage))
    mMyStats.Add(physdam)

    'magic damage
    Dim magdam As New Stat(eStattype.MagicDamage, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.MagicDamage))
    mMyStats.Add(magdam)

    'pure damage
    Dim puredam As New Stat(eStattype.PureDamage, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.PureDamage))
    mMyStats.Add(puredam)

    'hp removal
    Dim hpdam As New Stat(eStattype.HPRemoval, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.HPRemoval))
    mMyStats.Add(hpdam)

    'alldamage
    Dim alldam As New Stat(eStattype.AllDamageBurst, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.AllDamageBurst))
    mMyStats.Add(alldam)

    'effective hitpoint
    Dim effhp As New Stat(eStattype.EffectiveHP, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.EffectiveHP))
    mMyStats.Add(effhp)

    'spellimmunitycount
    Dim spcount As New Stat(eStattype.SpellImmunityCount, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.SpellImmunityCount))
    mMyStats.Add(spcount)

    'stun duration
    Dim stundur As New Stat(eStattype.Stun, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Stun))
    mMyStats.Add(stundur)

    'hex duration
    Dim hexdur As New Stat(eStattype.Hex, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Hex))
    mMyStats.Add(hexdur)

    'helpers
    Dim onen As New Stat(eStattype.Number1, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.Number1))
    mMyStats.Add(onen)

    Dim p06 As New Stat(eStattype.NumberPoint06, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.NumberPoint06))
    mMyStats.Add(p06)

    Dim porarm As New Stat(eStattype.ArmorxPoint06, Me, mGame) ', mGame.dbNames.GetFriendlyStatName(eStattype.ArmorxPoint06))
    mMyStats.Add(porarm)

    mGame.dbModifiers.RemoveAllHeroModsAndStatsByHero(Me)

    mGame.dbModifiers.ReplaceStats(mMyStats, Nothing)
    mGame.dbModifiers.ReplaceModifiers(mMyMods, Nothing)

  End Sub

  Public Property DisplayName As String Implements iGameEntity.DisplayName
    Get
      Return "Meepo Clone"
    End Get
    Set(value As String)

    End Set
  End Property
  Public Property EntityName As eEntity Implements iGameEntity.EntityName
    Get
      Return eEntity.untMeepo_Clone
    End Get
    Set(value As eEntity)

    End Set
  End Property
  Public Property Id As dvID Implements iGameEntity.Id
    Get
      Return Me.mId
    End Get
    Set(value As dvID)

    End Set
  End Property
  Public Property MyType As eSourceType Implements iGameEntity.MyType
    Get
      Return eSourceType.Pet_Instance
    End Get
    Set(value As eSourceType)

    End Set
  End Property

  Public Property ParentGameEntity As iGameEntity Implements iGameEntity.ParentGameEntity
    Get
      Return mParent
    End Get
    Set(value As iGameEntity)

    End Set
  End Property

  Public Property ParentGameEntityType As eSourceType Implements iGameEntity.ParentGameEntityType
    Get
      Return eSourceType.Hero_Instance
    End Get
    Set(value As eSourceType)

    End Set
  End Property



  Public Property HasAghs As Boolean Implements iPetUnit.HasAghs
    Get
      Return mParent.HasAghs
    End Get
    Set(value As Boolean)

    End Set
  End Property

  Public Function HasAghsAtTime(time As ddFrame) As Boolean Implements iPetUnit.HasAghsAtTime
    Return mParent.HasAghsAtTime(time)
  End Function





  Public Property Lifetime As Lifetime Implements iPetUnit.Lifetime
    Get
      Return mParent.AbilityInventory.GetUltimate.Lifetime
    End Get
    Set(value As Lifetime)

    End Set
  End Property




  Public Property PetName As ePetName Implements iPetUnit.PetName
    Get
      Return ePetName.untMeepo_Clone
    End Get
    Set(value As ePetName)

    End Set
  End Property


  Public Property TeamPosition As Integer Implements iPetUnit.TeamPosition
    Get
      Return mParent.TeamPosition
    End Get
    Set(value As Integer)

    End Set
  End Property

  Public Property UnitName As eUnit Implements iUnit.UnitName
    Get
      Return eUnit.untMeepo_Clone
    End Get
    Set(value As eUnit)

    End Set
  End Property

  Public Property UnitType As eUnittype Implements iUnit.UnitType
    Get
      Return eUnittype.Pet
    End Get
    Set(value As eUnittype)

    End Set
  End Property



  Public Property AghsLifetime As Lifetime Implements iPlayerUnit.AghsLifetime
    Get
      Return mParent.AghsLifetime
    End Get
    Set(value As Lifetime)

    End Set
  End Property

  Public Property BaseMagicResistance As Double Implements iPlayerUnit.BaseMagicResistance
    Get
      Return mParent.BaseMagicResistance
    End Get
    Set(value As Double)

    End Set
  End Property

  Public Property BaseMovementSpeed As Double Implements iPlayerUnit.BaseMovementSpeed
    Get
      Return mParent.BaseMovementSpeed
    End Get
    Set(value As Double)

    End Set
  End Property
  Public Property Bio As String Implements iPlayerUnit.Bio
    Get
      Return mParent.Bio
    End Get
    Set(value As String)

    End Set
  End Property

  Public Function GetTempAbilityLifetimes(ab As Ability_Info) As Lifetime Implements iPlayerUnit.GetTempAbilityLifetimes

    Return Nothing

  End Function


  Public Property Armor As Stat Implements iDisplayUnit.Armor
    Get
      Return mGame.dbModifiers.GetStatByParentandType(Me, eStattype.PhysicalArmor)
    End Get
    Set(value As Stat)

    End Set
  End Property

  Public Property HitPoints As Stat Implements iDisplayUnit.HitPoints
    Get
      Return mGame.dbModifiers.GetStatByParentandType(Me, eStattype.HitPoints)
    End Get
    Set(value As Stat)

    End Set
  End Property

  Public Property MovementSpeed As Stat Implements iDisplayUnit.MovementSpeed
    Get
      Return mGame.dbModifiers.GetStatByParentandType(Me, eStattype.MovementSpeed)
    End Get
    Set(value As Stat)

    End Set
  End Property

  Public Function NonScepterExistsAtLevel(lvl As Integer) As Boolean Implements iPetUnit.NonScepterExistsAtLevel
    'TODO this may need a condition check
    Return False
  End Function

  Public Property Source As IUnitUpgrade Implements iPetUnit.Source
    Get
      Return mParent.AbilityInventory.GetUltimate
    End Get
    Set(value As IUnitUpgrade)

    End Set
  End Property

  Public Property Mana As Stat Implements iPlayerUnit.Mana
    Get
      Return mGame.dbModifiers.GetStatByParentandType(Me, eStattype.Mana)
    End Get
    Set(value As Stat)

    End Set
  End Property

  Public Property ItemInventory As Pet_Item_Inventory Implements iPetUnit.ItemInventory
    Get
      Dim itmlist As New Item_List
      itmlist.Add(GetBoots(mParent.ItemInventory.mItemBuildAndAutoGeneratedItems))
      Dim iteminv As New Pet_Item_Inventory(Me, itmlist, mGame)
      Return iteminv
    End Get
    Set(value As Pet_Item_Inventory)

    End Set
  End Property

  Public Property AbilityInventory As Hero_Ability_Inventory Implements iPetUnit.AbilityInventory
    Get
      Return mParent.AbilityInventory
    End Get
    Set(value As Hero_Ability_Inventory)

    End Set
  End Property
End Class
